from A3_LVN.Version2.ssa import Ssa


class ParamsError(BaseException):
    pass


class AdditionalStmt:
    BACKUP_PREFIX = 'backup_'

    def __init__(self, func_label, call_node):
        self.func_label = func_label
        self.call_node = call_node
        self.backup_var = []

    def get_setup_stmt(self):
        """
        generate necessary setup stmt for calling func_label
        :return: list of generated stmt
        """
        stmt_list = []
        if len(self.func_label.args) != len(self.call_node.args):
            raise ParamsError("number of parameters not the same")
        for arg_number in range(len(self.func_label.args)):
            stmt_list.append(Ssa(target=self.func_label.args[arg_number].arg, left=self.call_node.args[arg_number].n,
                                 op=None, right=None))

        return stmt_list

    def get_backup_stmt(self):
        """
        generate necessary backup statement to avoid data loss when assigning at get_setup_stmt
        :return: list of generated stmt
        """
        stmt_lists = []
        if len(self.func_label.args) != len(self.call_node.args):
            raise ParamsError("number of parameters not the same")
        for arg_number in range(len(self.func_label.args)):
            arg = self.func_label.args[arg_number].arg
            self.backup_var.append(arg)
            ssa_stmt = Ssa(target=f"{self.BACKUP_PREFIX}{arg}",
                           left=arg,
                           op=None, right=None)
            stmt_lists.append(ssa_stmt)

        return stmt_lists

    def get_restore_backup_stmt(self):
        """
        generate necessary stmt for restoring backup stmt generated by `get_backup_stmt`
        :return:  list of generated stmt
        """
        stmt_lists = []
        for var in self.backup_var:
            ssa_stmt = Ssa(target=var,
                           left=f"{self.BACKUP_PREFIX}{var}",
                           op=None, right=None)
            stmt_lists.append(ssa_stmt)

        return stmt_lists

    def get_backup_and_setup_stmt(self):
        """
        combine setup and backup together
        :return:
        """
        str_list = self.get_backup_stmt()
        str_list.extend(self.get_setup_stmt())
        return str_list
