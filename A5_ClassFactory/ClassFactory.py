class BaseClass(object):
    def __init__(self, class_type):
        self.type = class_type

    def get_class_name(self):
        return self.type

    def get_a_num(self):
        return 6;

class DerivedClass(BaseClass):
    def __init__(self):
        print('I am a derived class object')
        super().__init__('Derived')

    def print_class_name(self):
        print('{} from {}'.format(super().get_class_name(), super().__class__()))


def get_identity(self):
    return self.identity

def ClassFactory(name, argnames, BaseClass=BaseClass):
    def __constructor__(self, **kwargs):
        self.identity = 'cloned'
        for key, value in kwargs.items():
            if key not in argnames:
                raise TypeError('Argument %s not valid for %s' % (key, self.__class__.__name__))
            setattr(self, key, value)
        BaseClass.__init__(self, name[:-len('Class')])

    def class_name(self):
        return BaseClass.get_class_name(self) + ' ({}): {}'.format('Generated by ClassFactory', self.__class__())

    def get_argnames(self):
        return argnames

    new_class = type(name, (BaseClass,), {"__init__": __constructor__,
                                          "get_class_name": class_name,
                                          "get_argnames": get_argnames,
                                          "get_identity": get_identity
                                          })
    return new_class

d = DerivedClass()
print(d.get_class_name())
d.print_class_name()

SpecialClass = ClassFactory("SpecialClass", "a b c".split())
s = SpecialClass(a=2)
s.a
print('My class name is {}'.format(s.get_class_name()))
print('My arg names are {}'.format(s.get_argnames()))
print('My identity is {}'.format(s.get_identity()))

#s1 = SpecialClass(d = 7)

